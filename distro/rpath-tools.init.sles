#!/bin/bash
#
# Copyright, 2010, rPath, Inc.
#
# chkconfig: 345 23 16
# description: Runs the rPath registration client (rpath).
### BEGIN INIT INFO
# Provides: rpath-tools
# Required-Start: $local_fs $network sfcb-conary
# Should-Start: 
# Required-Stop: 
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description: Runs the rPath registration client.
# Description: rPath Registration Client
### END INIT INFO

. /etc/rc.status

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status

# First reset status of this service
rc_reset

RPATH=/usr/bin/rpath
RPATHTOOSLBOOTCONFIG=/etc/conary/rpath-tools/config.d/boot_params
LOCKFILE=/var/lock/subsys/rpath-tools

servicename=rpath-tools

setbootparams() {
    rm -f $RPATHTOOLSBOOTCONFIG
    BOOTPARAMS=`sed 's# #\n#g' /proc/cmdline | awk '{if($i~/RPATHTOOLS/){print $i}}'`
    for param in $BOOTPARAMS
    do
        OPTION=`echo $param | cut -d '=' -f 2`
        VALUE=`echo $param | cut -d '=' -f 3`
        echo $OPTION $VALUE >> $RPATHTOOLSBOOTCONFIG
    done
}

start() {
    setbootparams
    touch $LOCKFILE
    echo -ne "Running rpath-register on boot..."
    $RPATH register --boot > /dev/null 2>&1
    rc_status -v
}

stop() {
    rm -f $LOCKFILE
    echo -ne "Running rpath-register on shutdown..."
    $RPATH register --shutdown > /dev/null 2>&1
    rc_status -v
}

checkstatus() {
       echo -ne "Checking $1 "
       [ -f $LOCKFILE ] && echo -ne "rpath-register run...lockfile exists"
        rc_status -v
}



restart() {
    stop
    start
}

RETVAL=0

# See how we were called.
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        checkstatus $servicename
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart|status}"
        exit 1
esac

rc_exit
